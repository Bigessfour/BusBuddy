using Xunit;
using BusBuddy.Forms;
using Microsoft.Extensions.Logging;
using BusBuddy.Data.Interfaces;
using BusBuddy.Models.Entities;
using System.Collections.Generic;
using System.Threading.Tasks;
using Moq;
using System;

namespace BusBuddy.Tests
{
    /// <summary>
    /// Additional tests for VehiclesManagementForm focusing on data display functionality
    /// </summary>
    public class VehiclesManagementForm_DataDisplayTests
    {
        private readonly Mock<ILogger<VehiclesManagementForm>> _loggerMock;
        private readonly Mock<IDatabaseHelper> _dbHelperMock;

        public VehiclesManagementForm_DataDisplayTests()
        {
            // Mock the logger
            _loggerMock = new Mock<ILogger<VehiclesManagementForm>>();
            
            // Mock the database helper
            _dbHelperMock = new Mock<IDatabaseHelper>();
        }

        [Fact]
        public async Task LoadVehicles_ShouldPopulateDataGridWithVehicles()
        {
            // Arrange
            var testVehicles = new List<Vehicle> {
                new Vehicle {
                    Id = 1,
                    VehicleNumber = "BUS001",
                    Make = "Blue Bird",
                    Model = "All American",
                    Year = 2022,
                    LicensePlate = "SCH-001",
                    VIN = "1HVBBABN11H365215",
                    Capacity = 45,
                    InsuranceExpiration = DateTime.Now.AddMonths(6)
                },
                new Vehicle {
                    Id = 2,
                    VehicleNumber = "BUS002",
                    Make = "Thomas",
                    Model = "Saf-T-Liner",
                    Year = 2023,
                    LicensePlate = "SCH-002",
                    VIN = "4UZABRDT04CL93420",
                    Capacity = 50,
                    InsuranceExpiration = DateTime.Now.AddMonths(9)
                }
            };
            
            _dbHelperMock.Setup(x => x.GetVehiclesAsync())
                .ReturnsAsync(testVehicles);

            // Creating the form
            var form = new VehiclesManagementForm(_dbHelperMock.Object, _loggerMock.Object);
            
            // Act - manually invoke the private LoadVehicles method using reflection
            var method = typeof(VehiclesManagementForm).GetMethod("LoadVehicles", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            var task = (Task)method.Invoke(form, null);
            await task;

            // Assert
            // Verify the database was called
            _dbHelperMock.Verify(x => x.GetVehiclesAsync(), Times.AtLeastOnce);
            
            // Verify logger was called to report successful loading
            _loggerMock.Verify(
                x => x.Log(
                    It.Is<LogLevel>(l => l == LogLevel.Information),
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => v.ToString().Contains("vehicles loaded")),
                    It.IsAny<Exception?>(),
                    It.Is<Func<It.IsAnyType, Exception?, string>>((v, t) => true)),
                Times.AtLeastOnce);
        }

        [Fact]
        public async Task LoadVehicles_ShouldHandleEmptyVehicleList()
        {
            // Arrange
            _dbHelperMock.Setup(x => x.GetVehiclesAsync())
                .ReturnsAsync(new List<Vehicle>());

            // Creating the form
            var form = new VehiclesManagementForm(_dbHelperMock.Object, _loggerMock.Object);
            
            // Act - manually invoke the private LoadVehicles method using reflection
            var method = typeof(VehiclesManagementForm).GetMethod("LoadVehicles", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            var task = (Task)method.Invoke(form, null);
            await task;

            // Assert
            // Verify the database was called
            _dbHelperMock.Verify(x => x.GetVehiclesAsync(), Times.AtLeastOnce);
            
            // Verify logger was called to report empty vehicles
            _loggerMock.Verify(
                x => x.Log(
                    It.Is<LogLevel>(l => l == LogLevel.Information),
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => v.ToString().Contains("No vehicles found")),
                    It.IsAny<Exception?>(),
                    It.Is<Func<It.IsAnyType, Exception?, string>>((v, t) => true)),
                Times.AtLeastOnce);
        }

        [Fact]
        public async Task LoadVehicles_ShouldHandleDatabaseException()
        {
            // Arrange
            _dbHelperMock.Setup(x => x.GetVehiclesAsync())
                .ThrowsAsync(new Exception("Database connection failed"));

            // Creating the form
            var form = new VehiclesManagementForm(_dbHelperMock.Object, _loggerMock.Object);
            
            // Act - manually invoke the private LoadVehicles method using reflection
            var method = typeof(VehiclesManagementForm).GetMethod("LoadVehicles", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            var task = (Task)method.Invoke(form, null);
            await task;

            // Assert
            // Verify the database was called
            _dbHelperMock.Verify(x => x.GetVehiclesAsync(), Times.AtLeastOnce);
            
            // Verify logger was called to report the exception
            _loggerMock.Verify(
                x => x.Log(
                    It.Is<LogLevel>(l => l == LogLevel.Error),
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => true),
                    It.Is<Exception?>(e => e.Message.Contains("Database connection failed")),
                    It.Is<Func<It.IsAnyType, Exception?, string>>((v, t) => true)),
                Times.AtLeastOnce);
        }
    }
}




