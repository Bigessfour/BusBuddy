name: Release Management

on:
  # Manually trigger for release management
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - create-release-branch
          - finalize-release
          - create-hotfix
          - finalize-hotfix
      version:
        description: 'Version number (e.g., 1.2.3)'
        required: true
      hotfix_description:
        description: 'Description for hotfix (only for hotfixes)'
        required: false

jobs:
  manage-release:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      # Create a new release branch from develop
      - name: Create Release Branch
        if: github.event.inputs.release_type == 'create-release-branch'
        run: |
          git checkout develop
          git pull origin develop
          git checkout -b release/${{ github.event.inputs.version }}
          # Update version in project files
          
          # For .NET projects, we can use XML transformation to update version
          $xml = [xml](Get-Content -Path BusBuddy.csproj)
          $versionElement = $xml.Project.PropertyGroup.Version
          if ($versionElement -eq $null) {
              $versionElement = $xml.CreateElement("Version")
              $versionElement.InnerText = "${{ github.event.inputs.version }}"
              $xml.Project.PropertyGroup.AppendChild($versionElement)
          } else {
              $versionElement.InnerText = "${{ github.event.inputs.version }}"
          }
          $xml.Save("BusBuddy.csproj")
          
          git add BusBuddy.csproj
          git commit -m "Bump version to ${{ github.event.inputs.version }}"
          git push origin release/${{ github.event.inputs.version }}
      
      # Finalize a release - merge to main and back to develop
      - name: Finalize Release
        if: github.event.inputs.release_type == 'finalize-release'
        run: |
          # Update version number in main
          git checkout release/${{ github.event.inputs.version }}
          git pull origin release/${{ github.event.inputs.version }}
          
          # First merge to main
          git checkout main
          git pull origin main
          git merge --no-ff release/${{ github.event.inputs.version }} -m "Merge release ${{ github.event.inputs.version }} to main"
          git tag -a v${{ github.event.inputs.version }} -m "Version ${{ github.event.inputs.version }}"
          git push origin main --tags
          
          # Then merge back to develop
          git checkout develop
          git pull origin develop
          git merge --no-ff release/${{ github.event.inputs.version }} -m "Merge release ${{ github.event.inputs.version }} back to develop"
          git push origin develop
          
          # Optionally delete the release branch
          git push origin --delete release/${{ github.event.inputs.version }}
      
      # Create a hotfix branch from main
      - name: Create Hotfix
        if: github.event.inputs.release_type == 'create-hotfix'
        run: |
          git checkout main
          git pull origin main
          git checkout -b hotfix/${{ github.event.inputs.version }}
          
          # Update version in project files for hotfix
          $xml = [xml](Get-Content -Path BusBuddy.csproj)
          $versionElement = $xml.Project.PropertyGroup.Version
          if ($versionElement -eq $null) {
              $versionElement = $xml.CreateElement("Version")
              $versionElement.InnerText = "${{ github.event.inputs.version }}"
              $xml.Project.PropertyGroup.AppendChild($versionElement)
          } else {
              $versionElement.InnerText = "${{ github.event.inputs.version }}"
          }
          $xml.Save("BusBuddy.csproj")
          
          git add BusBuddy.csproj
          git commit -m "Bump version to ${{ github.event.inputs.version }} for hotfix: ${{ github.event.inputs.hotfix_description }}"
          git push origin hotfix/${{ github.event.inputs.version }}
      
      # Finalize a hotfix - merge to main and back to develop
      - name: Finalize Hotfix
        if: github.event.inputs.release_type == 'finalize-hotfix'
        run: |
          git checkout hotfix/${{ github.event.inputs.version }}
          git pull origin hotfix/${{ github.event.inputs.version }}
          
          # First merge to main
          git checkout main
          git pull origin main
          git merge --no-ff hotfix/${{ github.event.inputs.version }} -m "Merge hotfix ${{ github.event.inputs.version }} to main"
          git tag -a v${{ github.event.inputs.version }} -m "Version ${{ github.event.inputs.version }} - Hotfix: ${{ github.event.inputs.hotfix_description }}"
          git push origin main --tags
          
          # Then merge back to develop
          git checkout develop
          git pull origin develop
          git merge --no-ff hotfix/${{ github.event.inputs.version }} -m "Merge hotfix ${{ github.event.inputs.version }} back to develop"
          git push origin develop
          
          # Optionally delete the hotfix branch
          git push origin --delete hotfix/${{ github.event.inputs.version }}
