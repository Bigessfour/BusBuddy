name: .NET Desktop CI

# This workflow runs when you push code or create a pull request to the specified branches
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    # Use a Windows runner since BusBuddy is a Windows Forms project
    runs-on: windows-latest

    # Build in both Debug and Release configurations to catch configuration-specific issues
    strategy:
      matrix:
        configuration: [ Debug, Release ]

    steps:
    # Step 1: Checkout your code from the repository
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetches all history for better coverage reporting

    # Step 2: Set up the .NET SDK (version should match your project's TargetFramework)
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'  # Matches the project's TargetFramework (net8.0-windows)

    # Step 3: Cache NuGet packages to speed up builds (saves time by reusing downloaded packages)
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ runner.os }}-nuget-

    # Step 4: Restore dependencies (downloads required packages like Entity Framework, MaterialSkin.2)
    - name: Restore dependencies
      run: dotnet restore BusBuddy.sln

    # Step 5: Format code and check for style issues (helps you learn coding standards)
    - name: Format and Check Code Style
      run: dotnet format BusBuddy.sln --verify-no-changes --severity warn
      continue-on-error: true  # Won't fail the build, just warns you

    # Step 6: Build the project (compiles your code to catch syntax errors)
    - name: Build
      run: dotnet build BusBuddy.sln --configuration ${{ matrix.configuration }} --no-restore

    # Step 7-9: Test steps removed as test project has been removed

    # Step 10: Upload build artifacts (useful for debugging if the build fails)
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.configuration }}
        path: |
          **/bin/**
          **/obj/**
      if: always()