# Use the .NET SDK image
FROM mcr.microsoft.com/dotnet/sdk:6.0

WORKDIR /app

# Install curl for health checks
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Copy Directory.Packages.props first (for centralized package management)
COPY ["Directory.Packages.props", "./"]
COPY ["global.json", "./"]

# Create directories for web-specific and non-UI tests
RUN mkdir -p /app/DockerTests/Web
RUN mkdir -p /app/DockerTests/Core

# Create new projects for container-compatible tests (web and core)
WORKDIR /app/DockerTests/Core
RUN dotnet new xunit --name BusBuddy.CoreTests

WORKDIR /app/DockerTests/Web
RUN dotnet new xunit --name BusBuddy.WebTests

# Add necessary packages to both test projects
WORKDIR /app/DockerTests/Core
RUN dotnet add package Moq
RUN dotnet add package Microsoft.EntityFrameworkCore.InMemory

WORKDIR /app/DockerTests/Web
RUN dotnet add package Moq
RUN dotnet add package Microsoft.EntityFrameworkCore.InMemory
RUN dotnet add package Microsoft.AspNetCore.Mvc.Testing
RUN dotnet add package Microsoft.AspNetCore.SignalR.Client

# Copy project files and shared dependencies
WORKDIR /app
COPY ["BusBuddy.csproj", "./"]
COPY ["Tests/BusBuddy.Tests.csproj", "Tests/"]

# Copy source code needed for tests (non-UI components)
COPY ["Entities", "Entities/"]
COPY ["Services", "Services/"] 
COPY ["Data", "Data/"]
COPY ["Models", "Models/"]
COPY ["DTOs", "DTOs/"]
COPY ["Controllers", "Controllers/"]
COPY ["Hubs", "Hubs/"]
COPY ["Pages", "Pages/"]
COPY ["WebStartup.cs", "./"]

# Copy test files that don't depend on Windows Forms
COPY ["Tests/*EntityTests.cs", "DockerTests/Core/"]
COPY ["Tests/ForeignKeyConstraintTests.cs", "DockerTests/Core/"]
COPY ["Tests/DashboardServiceTests.cs", "DockerTests/Web/"]

# Create smoke tests for both test projects
WORKDIR /app

# Core smoke test
RUN echo 'using Xunit; \n\
namespace BusBuddy.CoreTests \n\
{ \n\
    public class CoreSmokeTests \n\
    { \n\
        [Fact] \n\
        public void ContainerCanRunCoreTests() \n\
        { \n\
            Assert.True(true, "Docker container can run core tests"); \n\
        } \n\
    } \n\
}' > DockerTests/Core/CoreSmokeTests.cs

# Web smoke test
RUN echo 'using Xunit; \n\
using BusBuddy.Controllers; \n\
using BusBuddy.Services.Dashboard; \n\
using Microsoft.Extensions.Logging; \n\
using Moq; \n\
namespace BusBuddy.WebTests \n\
{ \n\
    public class WebSmokeTests \n\
    { \n\
        [Fact] \n\
        public void CanCreateControllerInstances() \n\
        { \n\
            // Verify we can create instances of web components \n\
            var dashboardServiceMock = new Mock<DashboardService>(null, null, null); \n\
            var loggerMock = new Mock<ILogger<DashboardController>>(); \n\
            Assert.True(true, "Docker container can work with web components"); \n\
        } \n\
    } \n\
}' > DockerTests/Web/WebSmokeTests.cs

# Create test settings
RUN echo '{ \n\
  "ConnectionStrings": { \n\
    "BusBuddyConnection": "Server=sqlserver-test;Database=BusBuddy_Test;User Id=sa;Password=TestP@ssw0rd!;TrustServerCertificate=True" \n\
  }, \n\
  "AllowedHosts": "*" \n\
}' > DockerTests/testsettings.json

# Build the test projects
RUN dotnet build DockerTests/Core/BusBuddy.CoreTests.csproj
RUN dotnet build DockerTests/Web/BusBuddy.WebTests.csproj

# Create a script to run all tests
RUN echo '#!/bin/bash \n\
echo "Running Core Tests..." \n\
dotnet test DockerTests/Core/BusBuddy.CoreTests.csproj --verbosity normal \n\
CORE_EXIT=$? \n\
\n\
echo "Running Web Tests..." \n\
dotnet test DockerTests/Web/BusBuddy.WebTests.csproj --verbosity normal \n\
WEB_EXIT=$? \n\
\n\
if [ $CORE_EXIT -ne 0 ] || [ $WEB_EXIT -ne 0 ]; then \n\
  exit 1 \n\
else \n\
  exit 0 \n\
fi' > run-tests.sh && chmod +x run-tests.sh

ENTRYPOINT ["./run-tests.sh"]
